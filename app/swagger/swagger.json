{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Social Media Backend",
    "description": "Basic Structure for Social Media Backend Project",
    "contact": {
      "name": "Niraj Kumar Verma",
      "email": "nirajverma.75way@gmail.com"
    }
  },
  "host": "localhost:5000",
  "basePath": "/api/",
  "tags": [
    { "name": "User", "description": "User-related APIs" },
    { "name": "Post", "description": "Post-related APIs" },
    { "name": "Like", "description": "Like-related APIs" },
    { "name": "Comment", "description": "Comment-related APIs" },
    { "name": "Replies", "description": "Replies-related APIs" },
    { "name": "Follow", "description": "Follow-related APIs" },
    { "name": "Notification", "description": "Notification-related APIs" }
  ],
  "schemes": ["http"],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter your Bearer Token in the format: Bearer <token>"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "components": {
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Enter your Bearer Token in the format: Bearer <token>"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "John Doe" },
          "username": { "type": "string", "example": "john_doe" },
          "bio": { "type": "string", "example": "A brief bio" },
          "email": { "type": "string", "example": "john.doe@example.com" },
          "password": { "type": "string", "example": "securepassword123" }
        },
        "required": ["name", "username", "email", "password"]
      },
      "Post": {
        "type": "object",
        "properties": {
          "content": { "type": "string", "example": "This is a sample post content." },
          "userId": { "type": "string", "example": "user123" },
          "mediaUrl": { "type": "string", "example": "http://example.com/media/image.png" }
        },
        "required": ["content", "userId"]
      },
      "Like": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "example": "user123" },
          "postId": { "type": "string", "example": "post123" }
        },
        "required": ["userId", "postId"]
      },
      "Comment": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "example": "user123" },
          "postId": { "type": "string", "example": "post123" },
          "content": { "type": "string", "example": "This is a comment." }
        },
        "required": ["userId", "postId", "content"]
      },
      "Reply": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "example": "user123" },
          "postId": { "type": "string", "example": "post123" },
          "parentId": { "type": "string", "example": "comment123" },
          "content": { "type": "string", "example": "This is a reply to the comment." }
        },
        "required": ["userId", "postId", "parentId", "content"]
      },
      "Follow": {
        "type": "object",
        "properties": {
          "followerId": { "type": "string", "example": "user123" },
          "followingId": { "type": "string", "example": "user456" }
        },
        "required": ["followerId", "followingId"]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "example": "user123" },
          "refId": { "type": "string", "example": "post456" },
          "isRead": { "type": "boolean", "example": false },
          "type": { "type": "string", "enum": ["LIKE", "COMMENT", "FOLLOW"], "example": "LIKE" },
          "message": { "type": "string", "example": "You have a new like on your post" }
        },
        "required": ["userId", "refId", "type", "message"]
      }
    }
  },
  "paths": {
    "/users": {
      "get": {
        "tags": ["User"],
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User"],
        "summary": "Create a new user",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            },
            "example": {
              "name": "John Doe",
              "username": "john_doe",
              "bio": "A brief bio",
              "email": "john.doe@example.com",
              "password": "securepassword123"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Get a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Update a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The user ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            },
            "example": {
              "name": "John Doe Updated",
              "username": "john_doe_updated",
              "bio": "Updated bio",
              "email": "john.doe.updated@example.com",
              "password": "newsecurepassword123"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "tags": ["User"],
        "summary": "Partial update of a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The user ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            },
            "example": {
              "bio": "Updated bio"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The user ID"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["User"],
        "summary": "User login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "password": { "type": "string" }
              },
              "required": ["email", "password"]
            },
            "example": {
              "email": "john.doe@example.com",
              "password": "securepassword123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful, returns JWT token"
          },
          "400": {
            "description": "Invalid email or password"
          }
        }
      }
    },
    "/posts": {
      "get": {
        "tags": ["Post"],
        "summary": "Get all posts",
        "responses": {
          "200": {
            "description": "A list of posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Post"],
        "summary": "Create a new post",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Post"
            },
            "example": {
              "content": "This is a sample post content.",
              "userId": "user123",
              "mediaUrl": "http://example.com/media/image.png"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Post created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "tags": ["Post"],
        "summary": "Get a post by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The post ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Post found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "put": {
        "tags": ["Post"],
        "summary": "Update a post by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The post ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Post"
            },
            "example": {
              "content": "This is an updated post content.",
              "userId": "user123",
              "mediaUrl": "http://example.com/media/updated_image.png"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Post updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "patch": {
        "tags": ["Post"],
        "summary": "Partial update of a post by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The post ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Post"
            },
            "example": {
              "content": "This is a partially updated post content."
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Post updated successfully"
          },
          "404": {
            "description": "Post not found"
          }
        }
      },
      "delete": {
        "tags": ["Post"],
        "summary": "Delete a post by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The post ID"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully"
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    },
    "/likes": {
      "get": {
        "tags": ["Like"],
        "summary": "Get all likes",
        "responses": {
          "200": {
            "description": "A list of likes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Like"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Like"],
        "summary": "Create a new like",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Like"
            },
            "example": {
              "userId": "user123",
              "postId": "post123"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Like created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/likes/{id}": {
      "get": {
        "tags": ["Like"],
        "summary": "Get a like by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The like ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Like found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Like"
                }
              }
            }
          },
          "404": {
            "description": "Like not found"
          }
        }
      },
      "put": {
        "tags": ["Like"],
        "summary": "Update a like by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The like ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Like"
            },
            "example": {
              "userId": "user123",
              "postId": "post123"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Like updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Like not found"
          }
        }
      },
      "patch": {
        "tags": ["Like"],
        "summary": "Partial update of a like by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The like ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Like"
            },
            "example": {
              "userId": "user123",
              "postId": "post123"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Like updated successfully"
          },
          "404": {
            "description": "Like not found"
          }
        }
      },
      "delete": {
        "tags": ["Like"],
        "summary": "Delete a like by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The like ID"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Like deleted successfully"
          },
          "404": {
            "description": "Like not found"
          }
        }
      }
    },
    "/comments": {
      "get": {
        "tags": ["Comment"],
        "summary": "Get all comments",
        "responses": {
          "200": {
            "description": "A list of comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Comment"],
        "summary": "Create a new comment",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Comment"
            },
            "example": {
              "userId": "user123",
              "postId": "post123",
              "content": "This is a comment."
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Comment created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": ["Comment"],
        "summary": "Get a comment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The comment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "put": {
        "tags": ["Comment"],
        "summary": "Update a comment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The comment ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Comment"
            },
            "example": {
              "userId": "user123",
              "postId": "post123",
              "content": "Updated comment content"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "patch": {
        "tags": ["Comment"],
        "summary": "Partial update of a comment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The comment ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Comment"
            },
            "example": {
              "content": "Updated comment content"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "delete": {
        "tags": ["Comment"],
        "summary": "Delete a comment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The comment ID"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      }
    },
    "/replies": {
      "get": {
        "tags": ["Replies"],
        "summary": "Get all replies",
        "responses": {
          "200": {
            "description": "A list of replies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reply"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Replies"],
        "summary": "Create a new reply",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Reply"
            },
            "example": {
              "userId": "user123",
              "postId": "post123",
              "parentId": "comment123",
              "content": "This is a reply to the comment."
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reply created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/replies/{id}": {
      "get": {
        "tags": ["Replies"],
        "summary": "Get a reply by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The reply ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Reply found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                }
              }
            }
          },
          "404": {
            "description": "Reply not found"
          }
        }
      },
      "put": {
        "tags": ["Replies"],
        "summary": "Update a reply by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The reply ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Reply"
            },
            "example": {
              "userId": "user123",
              "postId": "post123",
              "parentId": "comment123",
              "content": "Updated reply content"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Reply updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Reply not found"
          }
        }
      },
      "patch": {
        "tags": ["Replies"],
        "summary": "Partial update of a reply by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The reply ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Reply"
            },
            "example": {
              "content": "Updated reply content"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Reply updated successfully"
          },
          "404": {
            "description": "Reply not found"
          }
        }
      },
      "delete": {
        "tags": ["Replies"],
        "summary": "Delete a reply by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The reply ID"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Reply deleted successfully"
          },
          "404": {
            "description": "Reply not found"
          }
        }
      }
    },
    "/follow": {
      "get": {
        "tags": ["Follow"],
        "summary": "Get all follow relationships",
        "responses": {
          "200": {
            "description": "A list of follow relationships",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Follow"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Follow"],
        "summary": "Create a new follow relationship",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Follow"
            },
            "example": {
              "followerId": "user123",
              "followingId": "user456"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Follow relationship created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/follow/{id}": {
      "get": {
        "tags": ["Follow"],
        "summary": "Get a follow relationship by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The follow relationship ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Follow relationship found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Follow"
                }
              }
            }
          },
          "404": {
            "description": "Follow relationship not found"
          }
        }
      },
      "put": {
        "tags": ["Follow"],
        "summary": "Update a follow relationship by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The follow relationship ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Follow"
            },
            "example": {
              "followerId": "user123",
              "followingId": "user789"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Follow relationship updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Follow relationship not found"
          }
        }
      },
      "patch": {
        "tags": ["Follow"],
        "summary": "Partial update of a follow relationship by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The follow relationship ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Follow"
            },
            "example": {
              "followerId": "user123"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Follow relationship updated successfully"
          },
          "404": {
            "description": "Follow relationship not found"
          }
        }
      },
      "delete": {
        "tags": ["Follow"],
        "summary": "Delete a follow relationship by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The follow relationship ID"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Follow relationship deleted successfully"
          },
          "404": {
            "description": "Follow relationship not found"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": ["Notification"],
        "summary": "Get all notifications",
        "responses": {
          "200": {
            "description": "A list of notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Notification"],
        "summary": "Create a new notification",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Notification"
            },
            "example": {
              "userId": "user123",
              "refId": "post456",
              "isRead": false,
              "type": "LIKE",
              "message": "You have a new like on your post"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notification created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/notifications/{id}": {
      "get": {
        "tags": ["Notification"],
        "summary": "Get a notification by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The notification ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "404": {
            "description": "Notification not found"
          }
        }
      },
      "put": {
        "tags": ["Notification"],
        "summary": "Update a notification by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The notification ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Notification"
            },
            "example": {
              "userId": "user123",
              "refId": "post456",
              "isRead": true,
              "type": "LIKE",
              "message": "You liked a post"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Notification updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      },
      "patch": {
        "tags": ["Notification"],
        "summary": "Partial update of a notification by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The notification ID"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Notification"
            },
            "example": {
              "isRead": true
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Notification updated successfully"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      },
      "delete": {
        "tags": ["Notification"],
        "summary": "Delete a notification by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The notification ID"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Notification deleted successfully"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      }
    }
  }
}
